# This workflow shows how to launch a custom runner in GitHub Actionsand use it
name: Custom runner

permissions:
  contents: read
  id-token: write

env:
  WORKLOAD_IDENTITY_PROVIDER: 'projects/844024446343/locations/global/workloadIdentityPools/github-action-identity-pool/providers/github-actions-oidc-token'
  SERVICE_ACCOUNT: 'github-actions-vms@github-actions-356108.iam.gserviceaccount.com'
  GCP_ZONE: us-central1-a 

on:
  workflow_dispatch:

jobs:
  provision:
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.set-label.outputs.label }}
    steps:
      - uses: actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to GCP'
        uses: 'google-github-actions/auth@v0.8.0'
        with:
            create_credentials_file: 'true'
            workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
            service_account: ${{ env.SERVICE_ACCOUNT }}
      - name: Set INSTANCE env var
        run: echo "INSTANCE=github-action-runner-${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Get Token
        run: |
          TOKEN=$(curl -sS \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ secrets.PAT }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token |jq -r .token)
          echo "TOKEN=${TOKEN}" >> $GITHUB_ENV
          echo "::add-mask::${TOKEN}"
      - name: 'Provision Runner'
        run: |-
          set -e
          gcloud compute instances create ${{ env.INSTANCE }} \
            --tags="githubactions,ci,ephemeral,linux" \
            --project=${{ env.CLOUDSDK_PROJECT }} \
            --zone=${{ env.GCP_ZONE }} \
            --machine-type=e2-micro \
            --network-interface=network-tier=PREMIUM,subnet=default \
            --maintenance-policy=MIGRATE

          cat > runner.sh <<EOF
          mkdir actions-runner && cd actions-runner
          curl -o actions-runner-linux-x64-2.294.0.tar.gz \
            -L https://github.com/actions/runner/releases/download/v2.294.0/actions-runner-linux-x64-2.294.0.tar.gz
          echo "a19a09f4eda5716e5d48ba86b6b78fc014880c5619b9dba4a059eaf65e131780  actions-runner-linux-x64-2.294.0.tar.gz" | sha256sum -c
          tar xzf ./actions-runner-linux-x64-2.294.0.tar.gz
          sudo ./bin/installdependencies.sh
          ./config.sh --url https://github.com/kuisathaverat/actions_poc \
            --token ${TOKEN} --ephemeral \
            --labels "self-hosted,Linux,X64,${INSTANCE}" \
            --url https://github.com/kuisathaverat/actions_poc \
            --unattended \
            --disableupdate
          ls -la 
          pwd
          sudo ./svc.sh install $USER
          sudo ./svc.sh start
          EOF

          gcloud compute ssh ${INSTANCE} --command "$(cat runner.sh)" --zone=${{ env.GCP_ZONE }} --project=${{ env.CLOUDSDK_PROJECT }}
      - id: set-label
        run: echo "::set-output name=label::${INSTANCE}"
  
  build:
    needs: provision
    runs-on: ${{ needs.provision.outputs.label }}
    steps:
      - run: echo uname -a

  deprovision:
    runs-on: ubuntu-latest
    needs: build
    env:
      INSTANCE: github-action-runner-${GITHUB_SHA}
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to GCP'
        uses: 'google-github-actions/auth@v0.8.0'
        with:
            create_credentials_file: 'true'
            workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
            service_account: ${{ env.SERVICE_ACCOUNT }}
      - name: Get Token
        run: |
          TOKEN=$(curl -sS \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ secrets.PAT }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token |jq -r .token)
          echo "TOKEN=${TOKEN}" >> $GITHUB_ENV
          echo "::add-mask::${TOKEN}"
      - name: 'Deprovision Runner'
        run: |-
          cat > uninstall.sh <<EOF
          sudo ./svc.sh stop
          sudo ./svc.sh uninstall $USER
          ./config.sh remove --token ${TOKEN}
          EOF
          gcloud compute ssh ${INSTANCE} --command "$(cat uninstall.sh)" --zone=${{ env.GCP_ZONE }} --project=${{ env.CLOUDSDK_PROJECT }}
          gcloud compute instances delete ${{ env.INSTANCE }} --zone=${{ env.GCP_ZONE }} --project=${{ env.CLOUDSDK_PROJECT }}